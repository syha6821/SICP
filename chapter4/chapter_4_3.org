#+TITLE: Nondeterministic Computing
* Pre
** flatmap
#+name:flatmap
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<accumulate>>
  (define (flatmap proc seq) (accumulate append nil (map proc seq)))
#+end_src
** distinct
#+name:distinct
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (distinct? items)
    (cond ((null? items) true)
          ((null? (cdr items)) true)
          ((member (car items) (cdr items)) false)
          (else (distinct? (cdr items)))))
#+end_src
** square
#+name:square
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
#+end_src

** Filter
#+name:filter
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (filter predicate sequence)
    (cond ((null? sequence) nil)
          ((predicate (car sequence)) (cons (car sequence) (filter predicate (cdr sequence))))
          (else (filter predicate (cdr sequence)))))
#+end_src

#+RESULTS:
: (1 3 5)

** Accumulate
#+name:accumulate
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (accumulate op initial seq)
    (if (null? seq) initial (op (car seq) (accumulate op initial (cdr seq)))) )
#+end_src

** Enumerate
#+name:enumerate-interval
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (enumerate-interval low high)
    (if (> low high) nil (cons low (enumerate-interval (inc low) high))))
#+end_src

#+name:enumerate-tree
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (enumerate-tree tree)
    (cond ((null? tree) nil)
          ((not (pair? tree)) (list tree))
          (else (append (enumerate-tree (car tree)) (enumerate-tree (cdr tree))))
          ))
#+end_src

** pre-requistes
#+NAME:prime
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
  (define (smallest-divisor n) (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1 )))))
  (define (divides? a b) (= (remainder b a) 0))

  (define (prime? n)
    (and (not (= n 1)) (= n (smallest-divisor n))))
#+end_src

#+NAME:fib
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (fib n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+
                 (fib (- n 1))
                 (fib (- n 2))))))
#+end_src

#+NAME:square
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
#+end_src

#+NAME:gcd
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))
#+end_src

#+NAME:average
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (average a b) (/ (+ a b) 2))
#+end_src

#+NAME:pow
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (pow x n)
    (if (= n 1)
        x
        (* x (pow x (dec n)))))
#+end_src

** stream 
*** stream
#+name:stream
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<stream-interval>>
  <<stream-filter>>
  <<add-streams>>
  <<mul-streams>>
  <<scale-stream>>
  <<partial-sums>>
  (define (stream-car s) (car s))
  (define (stream-cdr s) (force (cdr s)))

  (define (stream-ref s n)
    (if (= n 0)
        (stream-car s)
        (stream-ref (stream-cdr s) (- n 1))))

  (define (stream-map proc . argstreams)
    (if (stream-null? (car argstreams))
        the-empty-stream
        (cons-stream
         (apply proc (map stream-car argstreams))
         (apply stream-map
                (cons proc (map stream-cdr argstreams))))))

  (define (stream-for-each proc s)
    (if (stream-null? s)
        'done
        (begin (proc (stream-car s))
               (stream-for-each proc (stream-cdr s)))))

  (define (neg-stream stream) (stream-map (lambda (x) (- x)) stream))


  (define (display-stream s)
    (stream-for-each display-line s))

  (define (display-line x) (newline) (display x))
#+end_src
*** stream interval
#+name:stream-interval
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (stream-enumerate-interval low high)
    (if (> low high)
        the-empty-stream
        (cons-stream
         low
         (stream-enumerate-interval (+ low 1) high))))
#+end_src

*** stream filter
#+name:stream-filter
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (stream-filter pred stream)
    (cond ((stream-null? stream) the-empty-stream)
          ((pred (stream-car stream))
           (cons-stream (stream-car stream)
                        (stream-filter
                         pred
                         (stream-cdr stream))))
          (else (stream-filter pred (stream-cdr stream)))))
#+end_src

*** add streams
#+name:add-streams
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (add-streams s1 s2) (stream-map + s1 s2))
#+end_src

*** mul streams
#+name:mul-streams
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (mul-streams s1 s2) (stream-map * s1 s2))
#+end_src

*** scale stream
#+name:scale-stream
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (scale-stream s n)
    (stream-map (lambda (e) (* n e)) s))
#+end_src
*** partial sums
#+name:partial-sums
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (partial-sums s)
    (cons-stream (stream-car s) (add-streams (stream-cdr s) (partial-sums s))))
#+end_src

** merge 
#+name:merge
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (merge s1 s2)
    (cond ((stream-null? s1) s2)
          ((stream-null? s2) s1)
          (else
           (let ((s1car (stream-car s1))
                 (s2car (stream-car s2)))
             (cond ((< s1car s2car)
                    (cons-stream
                     s1car
                     (merge (stream-cdr s1) s2)))
                   ((> s1car s2car)
                    (cons-stream
                     s2car
                     (merge s1 (stream-cdr s2))))
                   (else
                    (cons-stream
                     s1car
                     (merge (stream-cdr s1)
                            (stream-cdr s2)))))))))
#+end_src

** Integer 
#+name:integers
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define ones (cons-stream 1 ones))
  (define integers (cons-stream 1 (add-streams ones integers)))
#+end_src

** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src

** And-Apply
#+name:and-l
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
(define and-l (lambda x 
    (if (null? x)
        #t
        (if (car x) (apply and-l (cdr x)) #f))))
#+end_src

* 1. Amb and Search
** amb 
#+name:amb
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (require p) (if (not p) (amb)))
  (define (an-element-of items)
    (require (not (null? items)))
    (amb (car items) (an-element-of (cdr items))))
#+end_src

#+name:amb-integer
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (an-integer-starting-from n)
    (amb n (an-integer-starting-from (+ n 1))))
  (define (an-integer-between low high)
    (require (<= low high))
    (amb low (an-integer-between (+ low 1) high)))
#+end_src

** Ex 4.35 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<amb-integer>>
  (define (a-pythagorean-triple-between low high)
    (let ((i (an-integer-between low high)))
      (let ((j (an-integer-between i high)))
        (let ((k (an-integer-between j high)))
          (require (= (+ (* i i) (* j j)) (* k k)))
          (list i j k)))))

  (a-pythagorean-triple-between 1 10)
  (amb)
#+end_src

#+RESULTS:
: (3 4 5)
: (6 8 10)

** Ex 4.36 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<amb-integer>>
  <<square>>

  (define (a-pythagorean-triple)
    (let ((j (an-integer-starting-from 1)))
      (let ((i (an-integer-between 1 j)))
        (let ((k (an-integer-between j (+ i j))))
          (require (= (+ (square i) (square j)) (square k)))
          (list i j k)))))

  (a-pythagorean-triple)
#+end_src

#+RESULTS:
: (3 4 5)

** Ex 4.37
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<amb-integer>>
#+end_src

** Ex 4.0 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src
** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src


* 2. Example Programs
** Logic puzzles
*** dwelling
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
  (define (multiple-dwelling)
    (let ((baker (amb 1 2 3 4 5))
          (cooper (amb 1 2 3 4 5))
          (fletcher (amb 1 2 3 4 5))
          (miller (amb 1 2 3 4 5))
          (smith (amb 1 2 3 4 5)))
      (require (distinct? (list baker cooper fletcher miller smith)))
      (require (not (= baker 5)))
      (require (not (= cooper 1)))
      (require (not (= fletcher 1)))
      (require (> miller cooper))
      (require (not (= (abs (- smith fletcher)) 1)))
      (require (not (= (abs (- fletcher cooper)) 1)))
      (list (list 'baker baker)
            (list 'cooper cooper)
            (list 'fletcher fletcher)
            (list 'miller miller)
            (list 'smith smith))))

  (multiple-dwelling)
#+end_src

#+RESULTS:
: ((baker 1) (cooper 2) (fletcher 5) (miller 4) (smith 3))


*** Exercise 4.38
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
  (define (multiple-dwelling)
    (let ((baker (amb 1 2 3 4 5))
          (cooper (amb 1 2 3 4 5))
          (fletcher (amb 1 2 3 4 5))
          (miller (amb 1 2 3 4 5))
          (smith (amb 1 2 3 4 5)))
      (require (distinct? (list baker cooper fletcher miller smith)))
      (require (not (= baker 5)))
      (require (not (= cooper 1)))
      (require (not (= fletcher 5)))
      (require (not (= fletcher 1)))
      (require (> miller cooper))
      (require (not (= (abs (- fletcher cooper)) 1)))
      (list (list 'baker baker)
            (list 'cooper cooper)
            (list 'fletcher fletcher)
            (list 'miller miller)
            (list 'smith smith))))

  (multiple-dwelling)
  (amb)
  (amb)
  (amb)
  (amb)
  (amb)
#+end_src

*** Exercise 4.39
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
  (define (multiple-dwelling)
    (let ((baker (amb 1 2 3 4 5))
          (cooper (amb 1 2 3 4 5))
          (fletcher (amb 1 2 3 4 5))
          (miller (amb 1 2 3 4 5))
          (smith (amb 1 2 3 4 5)))
      (require (distinct? (list baker cooper fletcher miller smith)))
      (require (not (= baker 5)))
      (require (not (= cooper 1)))
      (require (not (= fletcher 5)))
      (require (not (= fletcher 1)))
      (require (> miller cooper))
      (require (not (= (abs (- smith fletcher)) 1)))
      (require (not (= (abs (- fletcher cooper)) 1)))
      (list (list 'baker baker)
            (list 'cooper cooper)
            (list 'fletcher fletcher)
            (list 'miller miller)
            (list 'smith smith))))

  (multiple-dwelling)
#+end_src

#+RESULTS:
: ((baker 3) (cooper 2) (fletcher 4) (miller 5) (smith 1))

*** Exercise 4.40
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
  (define (multiple-dwelling)
    (let ((baker (amb 1 2 3 4 5)))
      (require (not (= baker 5)))
      (let ((cooper (amb 1 2 3 4 5)))
        (require (not (= cooper 1)))
        (let ((fletcher (amb 1 2 3 4 5)))
          (require (not (= fletcher 5)))
          (require (not (= fletcher 1)))
          (require (not (= (abs (- fletcher cooper)) 1)))
          (let ((miller (amb 1 2 3 4 5)))
            (require (> miller cooper))
            (let ((smith (amb 1 2 3 4 5)))
              (require (not (= (abs (- smith fletcher)) 1)))
              (require (distinct? (list baker cooper fletcher miller smith)))
              (list (list 'baker baker)
                    (list 'cooper cooper)
                    (list 'fletcher fletcher)
                    (list 'miller miller)
                    (list 'smith smith))))))))

  (multiple-dwelling)
#+end_src

#+RESULTS:
: ((baker 3) (cooper 2) (fletcher 4) (miller 5) (smith 1))

*** Exercise 4.41 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<flatmap>>
  <<distinct>>
  <<filter>>
  (define (map-each l1 . l-rests)
    (define (mapp lists)
      (if (null? (cdr lists))
          (car lists)
          (mapp (cons (flatmap (lambda (e1) (map (lambda (e2) (if (list? e1) (append e1 (list e2)) (list e1 e2))) (cadr lists))) (car lists)) (cddr lists)))))
    (mapp (cons l1 l-rests)))

  (define baker car)
  (define cooper cadr)
  (define fletcher caddr)
  (define miller cadddr)
  (define smith (lambda (x) (car (cddddr x))))

  (define possible-combinations (filter distinct? (map-each '(1 2 3 4 5) '(1 2 3 4 5) '(1 2 3 4 5) '(1 2 3 4 5) '(1 2 3 4 5))))
  (filter (lambda (floors) (and (not (= 5 (baker floors)))
                           (not (= 1 (cooper floors)))
                           (not (= 5 (fletcher floors)))
                           (not (= 1 (fletcher floors)))
                           (> (miller floors) (cooper floors))
                           (not (= (abs (- (smith floors) (fletcher floors))) 1))
                           (not (= (abs (- (fletcher floors) (cooper floors))) 1)))) possible-combinations)
#+end_src

#+RESULTS:
: ((3 2 4 5 1))

*** Exercise 4.42 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
  (define (xor a b)
    (if a (not b) b))
  (define (liar)
    (let ((betty (amb 1 2 3 4 5))
          (ethel (amb 1 2 3 4 5))
          (joan (amb 1 2 3 4 5))
          (kitty (amb 1 2 3 4 5))
          (mary (amb 1 2 3 4 5)))
      (require (xor (= kitty 2) (= betty 3)))
      (require (xor (= ethel 1) (= joan 2)))
      (require (xor (= joan 3) (= ethel 5)))
      (require (xor (= kitty 2) (= mary 4)))
      (require (xor (= mary 4) (= betty 1)))
      (require (distinct? (list betty ethel joan kitty mary)))
      (list (list 'betty betty)
            (list 'ethel ethel)
            (list 'joan joan)
            (list 'kitty kitty)
            (list 'mary mary))))

  (liar)
#+end_src

#+RESULTS:
: ((betty 3) (ethel 5) (joan 2) (kitty 1) (mary 4))

*** Exercise 4.43 
#+begin_src racket :lang sicp : results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
  (define (daughter-of father) (car father))
  (define (yacht-of father) (cadr father))
  (define (father-of girl men)
    (cond ((null? men) nil)
          ((eq? girl (daughter-of (car men))) (car men))
          (else (father-of girl (cdr men)))))

  (define (yacht-puzzle)
    (let ((moore (list (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)
                       (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)))
          (downing (list (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)
                         (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)))
          (hall (list (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)
                      (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)))
          (barnacle (list (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)
                          (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)))
          (parker (list (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)
                        (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary))))
      (require (distinct? moore))
      (require (distinct? downing))
      (require (distinct? hall))
      (require (distinct? barnacle))
      (require (distinct? parker))
      (require (distinct? (map daughter-of (list moore downing hall barnacle parker))))
      (require (distinct? (map yacht-of (list moore downing hall barnacle parker))))
      (require (eq? (daughter-of moore) 'Mary))
      (require (eq? (yacht-of barnacle) 'Gabrielle))
      (require (eq? (yacht-of moore) 'Lorna))
      (require (eq? (yacht-of hall) 'Rosalind))
      (require (eq? (yacht-of downing) 'Melissa))
      (require (eq? (daughter-of barnacle) 'Melissa))
      (require (eq? (yacht-of (father-of 'Gabrielle (list moore downing hall barnacle parker))) (daughter-of parker)))
      (list (list 'moore (list 'daughter: (daughter-of moore) 'yacht: (yacht-of moore)))
            (list 'downing (list 'daughter: (daughter-of downing) 'yacht: (yacht-of downing)))
            (list 'hall (list 'daughter: (daughter-of hall) 'yacht: (yacht-of hall)))
            (list 'barnacle (list 'daughter: (daughter-of barnacle) 'yacht: (yacht-of barnacle)))
            (list 'parker (list 'daughter: (daughter-of parker) 'yacht: (yacht-of parker))))))

  (yacht-puzzle)
#+end_src

#+RESULTS:
: ((moore (daughter: Mary yacht: Lorna)) (downing (daughter: Lorna yacht: Melissa)) (hall (daughter: Gabrielle yacht: Rosalind)) (barnacle (daughter: Melissa yacht: Gabrielle)) (parker (daughter: Rosalind yacht: Mary)))

#+begin_src racket :lang sicp : results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
  (define (daughter-of father) (car father))
  (define (yacht-of father) (cadr father))
  (define (father-of girl men)
    (cond ((null? men) nil)
          ((eq? girl (daughter-of (car men))) (car men))
          (else (father-of girl (cdr men)))))

  (define (yacht-puzzle)
    (let ((moore (list (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)
                       (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary))))
      (require (eq? (yacht-of moore) 'Lorna))
      ;; (require (eq? (daughter-of moore) 'Mary))
      (let ((downing (list (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)
                           (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary))))
        (require (eq? (yacht-of downing) 'Melissa))
        (let ((hall (list (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)
                          (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary))))
          (require (eq? (yacht-of hall) 'Rosalind))
          (let ((barnacle (list (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)
                                (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary))))
            (require (eq? (yacht-of barnacle) 'Gabrielle))
            (require (eq? (daughter-of barnacle) 'Melissa))
            (let ((parker (list (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary)
                                (amb 'Gabrielle 'Lorna 'Rosalind 'Melissa 'Mary))))
              (require (distinct? moore))
              (require (distinct? downing))
              (require (distinct? hall))
              (require (distinct? barnacle))
              (require (distinct? parker))
              (require (distinct? (map daughter-of (list moore downing hall barnacle parker))))
              (require (distinct? (map yacht-of (list moore downing hall barnacle parker))))
              (require (eq? (yacht-of (father-of 'Gabrielle (list moore downing hall barnacle parker))) (daughter-of parker)))
              (list (list 'moore (list 'daughter: (daughter-of moore) 'yacht: (yacht-of moore)))
                    (list 'downing (list 'daughter: (daughter-of downing) 'yacht: (yacht-of downing)))
                    (list 'hall (list 'daughter: (daughter-of hall) 'yacht: (yacht-of hall)))
                    (list 'barnacle (list 'daughter: (daughter-of barnacle) 'yacht: (yacht-of barnacle)))
                    (list 'parker (list 'daughter: (daughter-of parker) 'yacht: (yacht-of parker))))))))))

  (yacht-puzzle)
  (amb)
#+end_src

#+RESULTS:
: amb tree exhausted
:   context...:
:    /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-WC1J8Y/org-babel-3uO7UG.rkt:3:0
:    body of "/var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-WC1J8Y/org-babel-3uO7UG.rkt"

*** Exercise 4.44 
#+name:chess
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (a-possible-position)
    (list (an-integer-between 1 8) (an-integer-between 1 8)))

  (define (a-possible-position-at-n-row n)
    (list n (an-integer-between 1 8)))

  (define (row q) (car q))
  (define (col q) (cadr q))
  (define (same-row? q1 q2)
    (eq? (row q1) (row q2)))
  (define (same-col? q1 q2)
    (eq? (col q1) (col q2)))
  (define (diagonal? q1 q2)
    (eq? (abs (- (row q1) (row q2))) (abs (- (col q1) (col q2)))))

  (define (checkmate? q1 q2)
    (or (same-row? q1 q2) (same-col? q1 q2) (diagonal? q1 q2)))
#+end_src

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
  <<amb-integer>>
  <<chess>>
  <<and-l>>

  (define (puzzle)
    (define (eight-queens queens left)
      (cond ((= 1 left) queens)
            (else (let ((next-queen (a-possible-position)))
                    (require (apply and-l (map (lambda (queen) (not (checkmate? queen next-queen))) queens)))
                    (eight-queens (append queens (list next-queen)) (- left 1))))))
    (eight-queens (list (a-possible-position)) 8))
  (puzzle)
#+end_src

#+RESULTS:
: ((1 1) (2 5) (3 8) (4 6) (5 3) (6 7) (7 2) (8 4))

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
  <<amb-integer>>
  <<chess>>
  <<and-l>>

  (define (puzzle)
    (define (eight-queens queens left)
      (cond ((zero? left) queens)
            (else (let ((next-queen (a-possible-position-at-n-row (- 9 left))))
                    (require (apply and-l (map (lambda (queen) (not (checkmate? queen next-queen))) queens)))
                    (eight-queens (append queens (list next-queen)) (- left 1))))))
    (eight-queens (list (a-possible-position-at-n-row 1)) 7))
  (puzzle)
  (amb)
  (amb)
  (amb)
  (amb)
  (amb)
  (amb)
#+end_src

#+RESULTS:
: ((1 1) (2 5) (3 8) (4 6) (5 3) (6 7) (7 2) (8 4))
: ((1 1) (2 6) (3 8) (4 3) (5 7) (6 4) (7 2) (8 5))
: ((1 1) (2 7) (3 4) (4 6) (5 8) (6 2) (7 5) (8 3))
: ((1 1) (2 7) (3 5) (4 8) (5 2) (6 4) (7 6) (8 3))
: ((1 2) (2 4) (3 6) (4 8) (5 3) (6 1) (7 7) (8 5))
: ((1 2) (2 5) (3 7) (4 1) (5 3) (6 8) (7 6) (8 4))
: ((1 2) (2 5) (3 7) (4 4) (5 1) (6 8) (7 6) (8 3))


** Parsing natural language
*** parser
#+name:parser
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  (define nouns '(noun student professor cat class))
  (define verbs '(verb studies lectures eats sleeps))
  (define articles '(article the a))
  (define prepositions '(prep for to in by with))

  (define (parse-sentence)
    (list 'sentence
          (parse-noun-phrase)
          (parse-verb-phrase)))

  (define (parse-prepositional-phrase)
    (list 'prep-phrase
          (parse-word prepositions)
          (parse-noun-phrase)))

  (define (parse-verb-phrase)
    (define (maybe-extend verb-phrase)
      (amb verb-phrase
           (maybe-extend
            (list 'verb-phrase
                  verb-phrase
                  (parse-prepositional-phrase)))))
    (maybe-extend (parse-word verbs)))

  (define (parse-simple-noun-phrase)
    (list 'simple-noun-phrase
          (parse-word articles)
          (parse-word nouns)))

  (define (parse-noun-phrase)
    (define (maybe-extend noun-phrase)
      (amb noun-phrase
           (maybe-extend
            (list 'noun-phrase
                  noun-phrase
                  (parse-prepositional-phrase)))))
    (maybe-extend (parse-simple-noun-phrase)))

  (define (parse-word word-list)
    (require (not (null? *unparsed*)))
    (require (memq (car *unparsed*) (cdr word-list)))
    (let ((found-word (car *unparsed*)))
      (set! *unparsed* (cdr *unparsed*))
      (list (car word-list) found-word)))

  (define *unparsed* '())
  (define (parse input)
    (set! *unparsed* input)
    (let ((sent (parse-sentence)))
      (require (null? *unparsed*)) sent))
#+end_src

*** parser-test
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<parser>>
  (parse '(the professor lectures to the student in the class with the cat))
#+end_src


*** Exercise 4.47 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  (define nouns '(noun student professor cat class))
  (define verbs '(verb studies lectures eats sleeps))
  (define articles '(article the a))
  (define prepositions '(prep for to in by with))

  (define (parse-sentence)
    (list 'sentence
          (parse-noun-phrase)
          (parse-verb-phrase)))

  (define (parse-prepositional-phrase)
    (list 'prep-phrase
          (parse-word prepositions)
          (parse-noun-phrase)))

  (define (parse-verb-phrase)
    (amb (parse-word verbs)
         (list 'verb-phrase
               (parse-verb-phrase)
               (parse-prepositional-phrase))))

  (define (parse-simple-noun-phrase)
    (list 'simple-noun-phrase
          (parse-word articles)
          (parse-word nouns)))

  (define (parse-noun-phrase)
    (define (maybe-extend noun-phrase)
      (amb noun-phrase
           (maybe-extend
            (list 'noun-phrase
                  noun-phrase
                  (parse-prepositional-phrase)))))
    (maybe-extend (parse-simple-noun-phrase)))

  (define (parse-word word-list)
    (require (not (null? *unparsed*)))
    (require (memq (car *unparsed*) (cdr word-list)))
    (let ((found-word (car *unparsed*)))
      (set! *unparsed* (cdr *unparsed*))
      (list (car word-list) found-word)))

  (define *unparsed* '())
  (define (parse input)
    (set! *unparsed* input)
    (let ((sent (parse-sentence)))
      (require (null? *unparsed*)) sent))

  (parse '(the professor lectures lectures))
#+end_src

#+RESULTS:
: (sentence (simple-noun-phrase (article the) (noun professor)) (verb lectures))


*** Exercise 4.48 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  (define nouns '(noun student professor cat class))
  (define verbs '(verb studies lectures eats sleeps))
  (define articles '(article the a))
  (define prepositions '(prep for to in by with))

  (define adjectives '(adjective old young cute))
  (define adverbs '(adverb very really))

  (define (parse-sentence)
    (list 'sentence
          (parse-noun-phrase)
          (parse-verb-phrase)))

  (define (parse-prepositional-phrase)
    (list 'prep-phrase
          (parse-word prepositions)
          (parse-noun-phrase)))

  (define (parse-verb-phrase)
    (define (maybe-extend verb-phrase)
      (amb verb-phrase
           (maybe-extend
            (list 'verb-phrase
                  verb-phrase
                  (parse-prepositional-phrase)))))
    (maybe-extend (parse-word verbs)))

  (define (parse-simple-noun-phrase)
    (list 'simple-noun-phrase
          (parse-word articles)
          (parse-word nouns)))

  (define (parse-noun-phrase)
    (define (maybe-extend noun-phrase)
      (amb noun-phrase
           (maybe-extend
            (list 'noun-phrase
                  noun-phrase
                  (parse-prepositional-phrase)))))
    (maybe-extend (parse-simple-noun-phrase)))

  (define (parse-word word-list)
    (require (not (null? *unparsed*)))
    (require (memq (car *unparsed*) (cdr word-list)))
    (let ((found-word (car *unparsed*)))
      (set! *unparsed* (cdr *unparsed*))
      (list (car word-list) found-word)))

  (define *unparsed* '())

  (define (parse input)
    (set! *unparsed* input)
    (let ((sent (parse-sentence)))
      (require (null? *unparsed*)) sent))

  (parse '(the professor lectures to the cat))
#+end_src

#+RESULTS:
: (sentence (simple-noun-phrase (article the) (noun professor)) (verb-phrase (verb lectures) (prep-phrase (prep to) (simple-noun-phrase (article the) (noun cat)))))


*** Exercise 4.49 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  (define nouns '(noun student professor cat class))
  (define verbs '(verb studies lectures eats sleeps))
  (define articles '(article the a))
  (define prepositions '(prep for to in by with))

  (define adjectives '(adjective old young cute))
  (define adverbs '(adverb very really))

  (define (parse-sentence)
    (list 'sentence
          (parse-noun-phrase)
          (parse-verb-phrase)))

  (define (parse-prepositional-phrase)
    (list 'prep-phrase
          (parse-word prepositions)
          (parse-noun-phrase)))

  (define (parse-verb-phrase)
    (define (maybe-extend verb-phrase)
      (amb verb-phrase
           (maybe-extend
            (list 'verb-phrase
                  verb-phrase
                  (parse-prepositional-phrase)))))
    (maybe-extend (parse-word verbs)))

  (define (parse-simple-noun-phrase)
    (list 'simple-noun-phrase
          (parse-word articles)
          (parse-word nouns)))

  (define (parse-noun-phrase)
    (define (maybe-extend noun-phrase)
      (amb noun-phrase
           (maybe-extend
            (list 'noun-phrase
                  noun-phrase
                  (parse-prepositional-phrase)))))
    (maybe-extend (parse-simple-noun-phrase)))

  ;; (define (parse-word word-list)
  ;;   (let ((found-word (an-element-of (cdr word-list))))
  ;;     (list (car word-list) found-word)))

  (define (parse-word word-list)
      (list (car word-list) (an-element-of (cdr word-list))))

  (define *unparsed* '())

  (define (parse input)
    (set! *unparsed* input)
    (let ((sent (parse-sentence)))
      (require (null? *unparsed*)) sent))

  (parse-sentence)
  (amb)
  (amb)
  (amb)
  (amb)
  (amb)
#+end_src

#+RESULTS:
: (sentence (simple-noun-phrase (article the) (noun student)) (verb studies))
: (sentence (simple-noun-phrase (article the) (noun student)) (verb-phrase (verb studies) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))))
: (sentence (simple-noun-phrase (article the) (noun student)) (verb-phrase (verb-phrase (verb studies) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))))
: (sentence (simple-noun-phrase (article the) (noun student)) (verb-phrase (verb-phrase (verb-phrase (verb studies) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))))
: (sentence (simple-noun-phrase (article the) (noun student)) (verb-phrase (verb-phrase (verb-phrase (verb-phrase (verb studies) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))))
: (sentence (simple-noun-phrase (article the) (noun student)) (verb-phrase (verb-phrase (verb-phrase (verb-phrase (verb-phrase (verb studies) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))))

*** Exercise 4.0 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
#+end_src


*** Exercise 4.0 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
#+end_src


** Exercise 4.0 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
#+end_src


* 3. Implementing the amb Evaluator
** Exercise 4.0 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
#+end_src


** Exercise 4.0 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<amb>>
  <<distinct>>
#+end_src
