#+TITLE: Lazy Evaluation
* Pre
** square
#+name:square
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
#+end_src

** Filter
#+name:filter
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (filter predicate sequence)
    (cond ((null? sequence) nil)
          ((predicate (car sequence)) (cons (car sequence) (filter predicate (cdr sequence))))
          (else (filter predicate (cdr sequence)))))
#+end_src

#+RESULTS:
: (1 3 5)

** Accumulate
#+name:accumulate
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (accumulate op initial seq)
    (if (null? seq) initial (op (car seq) (accumulate op initial (cdr seq)))) )
#+end_src

** Enumerate
#+name:enumerate-interval
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (enumerate-interval low high)
    (if (> low high) nil (cons low (enumerate-interval (inc low) high))))
#+end_src

#+name:enumerate-tree
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (enumerate-tree tree)
    (cond ((null? tree) nil)
          ((not (pair? tree)) (list tree))
          (else (append (enumerate-tree (car tree)) (enumerate-tree (cdr tree))))
          ))
#+end_src

** pre-requistes
#+NAME:prime
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
  (define (smallest-divisor n) (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1 )))))
  (define (divides? a b) (= (remainder b a) 0))

  (define (prime? n)
    (and (not (= n 1)) (= n (smallest-divisor n))))
#+end_src

#+NAME:fib
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (fib n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+
                 (fib (- n 1))
                 (fib (- n 2))))))
#+end_src

#+NAME:square
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
#+end_src

#+NAME:gcd
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))
#+end_src

#+NAME:average
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (average a b) (/ (+ a b) 2))
#+end_src

#+NAME:pow
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (pow x n)
    (if (= n 1)
        x
        (* x (pow x (dec n)))))
#+end_src

** stream 
*** stream
#+name:stream
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<stream-interval>>
  <<stream-filter>>
  <<add-streams>>
  <<mul-streams>>
  <<scale-stream>>
  <<partial-sums>>
  (define (stream-car s) (car s))
  (define (stream-cdr s) (force (cdr s)))

  (define (stream-ref s n)
    (if (= n 0)
        (stream-car s)
        (stream-ref (stream-cdr s) (- n 1))))

  (define (stream-map proc . argstreams)
    (if (stream-null? (car argstreams))
        the-empty-stream
        (cons-stream
         (apply proc (map stream-car argstreams))
         (apply stream-map
                (cons proc (map stream-cdr argstreams))))))

  (define (stream-for-each proc s)
    (if (stream-null? s)
        'done
        (begin (proc (stream-car s))
               (stream-for-each proc (stream-cdr s)))))

  (define (neg-stream stream) (stream-map (lambda (x) (- x)) stream))


  (define (display-stream s)
    (stream-for-each display-line s))

  (define (display-line x) (newline) (display x))
#+end_src
*** stream interval
#+name:stream-interval
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (stream-enumerate-interval low high)
    (if (> low high)
        the-empty-stream
        (cons-stream
         low
         (stream-enumerate-interval (+ low 1) high))))
#+end_src

*** stream filter
#+name:stream-filter
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (stream-filter pred stream)
    (cond ((stream-null? stream) the-empty-stream)
          ((pred (stream-car stream))
           (cons-stream (stream-car stream)
                        (stream-filter
                         pred
                         (stream-cdr stream))))
          (else (stream-filter pred (stream-cdr stream)))))
#+end_src

*** add streams
#+name:add-streams
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (add-streams s1 s2) (stream-map + s1 s2))
#+end_src

*** mul streams
#+name:mul-streams
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (mul-streams s1 s2) (stream-map * s1 s2))
#+end_src

*** scale stream
#+name:scale-stream
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (scale-stream s n)
    (stream-map (lambda (e) (* n e)) s))
#+end_src
*** partial sums
#+name:partial-sums
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (partial-sums s)
    (cons-stream (stream-car s) (add-streams (stream-cdr s) (partial-sums s))))
#+end_src

** merge 
#+name:merge
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (merge s1 s2)
    (cond ((stream-null? s1) s2)
          ((stream-null? s2) s1)
          (else
           (let ((s1car (stream-car s1))
                 (s2car (stream-car s2)))
             (cond ((< s1car s2car)
                    (cons-stream
                     s1car
                     (merge (stream-cdr s1) s2)))
                   ((> s1car s2car)
                    (cons-stream
                     s2car
                     (merge s1 (stream-cdr s2))))
                   (else
                    (cons-stream
                     s1car
                     (merge (stream-cdr s1)
                            (stream-cdr s2)))))))))
#+end_src

** Integer 
#+name:integers
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define ones (cons-stream 1 ones))
  (define integers (cons-stream 1 (add-streams ones integers)))
#+end_src

** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src

* 1. Normal Order and Applicative Order
** Ex 4.25 
applicative -> infinite loop
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (unless condition usual-value exceptional-value)
    (if condition exceptional-value usual-value))
  (define (factorial n)
    (unless (= n 1)
      (* n (factorial (- n 1)))
      1))
#+end_src

#+RESULTS:



** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (for-each + '())
#+end_src

#+RESULTS:

** Test 
#+begin_src racket :lang sicp
  (list 'quote '())
#+end_src

#+RESULTS:
: (quote ())

#+begin_src racket :lang sicp
  (pair? '())
#+end_src

#+RESULTS:
: #t
