#+TITLE: Modeling with Mutable Data
* Pre
** square
#+name:square
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
#+end_src

** Filter
#+name:filter
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (filter predicate sequence)
    (cond ((null? sequence) nil)
          ((predicate (car sequence)) (cons (car sequence) (filter predicate (cdr sequence))))
          (else (filter predicate (cdr sequence)))))
#+end_src

#+RESULTS:
: (1 3 5)

** Accumulate
#+name:accumulate
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (accumulate op initial seq)
    (if (null? seq) initial (op (car seq) (accumulate op initial (cdr seq)))) )
#+end_src

** Enumerate
#+name:enumerate-interval
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (enumerate-interval low high)
    (if (> low high) nil (cons low (enumerate-interval (inc low) high))))
#+end_src

#+name:enumerate-tree
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (enumerate-tree tree)
    (cond ((null? tree) nil)
          ((not (pair? tree)) (list tree))
          (else (append (enumerate-tree (car tree)) (enumerate-tree (cdr tree))))
          ))
#+end_src

** pre-requistes
#+NAME:prime
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
  (define (smallest-divisor n) (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1 )))))
  (define (divides? a b) (= (remainder b a) 0))

  (define (prime? n)
    (and (not (= n 1)) (= n (smallest-divisor n))))
#+end_src

#+NAME:fib
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (fib n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+
                 (fib (- n 1))
                 (fib (- n 2))))))
#+end_src

#+NAME:square
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
#+end_src

#+NAME:gcd
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))
#+end_src

#+NAME:average
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (average a b) (/ (+ a b) 2))
#+end_src

#+NAME:pow
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (pow x n)
    (if (= n 1)
        x
        (* x (pow x (dec n)))))
#+end_src
** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src


* 1. Mutable List Structure
** Exercise 3.12 
#+name:append!
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (append! x y)
    (set-cdr! (last-pair x) y)
    x)

  (define (last-pair x)
    (if (null? (cdr x)) x (last-pair (cdr x))))
#+end_src


** Exercise 3.13
#+name:cycle
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (make-cycle x)
    (set-cdr! (last-pair x) x)
    x)
#+end_src

** Exercise 3.14 
#+name:mystery
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (mystery x)
    (define (loop x y)
      (if (null? x)
          y
          (let ((temp (cdr x)))
            (set-cdr! x y)
            (loop temp x))))
    (loop x nil))
#+end_src

#+RESULTS:
: 3
: 4
: 7


** Exercise 3.16 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (count-pairs l)
    (if (not (pair? l))
        0
        (+ 1
           (count-pairs (car l))
           (count-pairs (cdr l)))))


  (define x (cons 1 2))
  (define z (cons x x))

  (define a (cons 1 2))
  (define b (cons a a))
  (define c (cons b b))
  (set-cdr! a b)

  (count-pairs (cons x x))
  (count-pairs (cons z nil))
  (count-pairs (cons z z))
  (count-pairs c)
#+end_src

#+RESULTS:
: 3
: 4
: 7

** Exercise 3.17 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<append!>>
  (define (count-pairs l)
    (define (iter l checked)
      (if (or (not (pair? l)) (memq l checked))
                 0
                 (begin (if (null? checked)
                            (set! checked (list l))
                            (append! checked (list l)))
                        (+ 1
                           (iter (car l) checked)
                           (iter (cdr l) checked)))))
    (iter l nil))

  (define x (cons 1 2))
  (define z (cons x x))

  (define a (cons 1 2))
  (define b (cons a a))
  (define c (cons b b))
  (set-cdr! a b)

  (count-pairs (cons x x))
  (count-pairs (cons z nil))
  (count-pairs (cons z z))
  (count-pairs c)
#+end_src

#+RESULTS:
: 2
: 3
: 3
: 3

** Exercise 3.18 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<append!>>
  <<cycle>>

  (define (cycle? l)
    (define (iter l head)
      (cond ((null? l) false)
            ((eq? (cdr l) head) true)
            (else (iter (cdr l) head))))
    (iter l l))

  (define x '(a b c)) 
  (define y '(d e f)) 
  (set-car! (cdr x) y) 
  (set-car! x (cdr x)) 
  (set-cdr! (last-pair y) (cdr y))
  (cycle? x)
#+end_src

#+RESULTS:
: #f


** Exercise 3.18 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<append!>>
  <<cycle>>

  (define (cycle? l)
    (define (iter l head)
      (cond ((not (pair? l)) false)
            ((eq? (cdr l) head) true)
            (else (or (if (pair? (car l)) (cycle? (car l)) false)
                      (iter (cdr l) head)))))
    (iter l l))

  (define x '(a b c)) 
  (define y '(d e f)) 
  (set-car! (cdr x) y) 
  (set-car! x (cdr x)) 
  (set-cdr! (last-pair y) (cdr y))
  (cycle? x)
#+end_src

#+RESULTS:
: /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-xr7I0Q/org-babel-d7augD.rkt:18:41: cycle: unbound identifier
:   in: cycle
:   location...:
:    /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-xr7I0Q/org-babel-d7augD.rkt:18:41


** Exercise 3.18 (re)
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<append!>>
  <<cycle>>

  (define (cycle? l)
    (define (iter l seen)
      (cond ((not (pair? l)) false)
            ((memq l seen) true)
            (else (or (iter (car l) (cons l seen))
                      (iter (cdr l) (cons l seen))))))
    (iter l nil))

  (define x '(a b c)) 
  (define y '(d e f)) 
  (set-car! (cdr x) y) 
  (set-car! x (cdr x)) 
  (set-cdr! (last-pair y) (cdr y))
  (cycle? x)
#+end_src

#+RESULTS:
: #t


** Exercise 3.19 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<append!>>
  <<cycle>>

  (define (cycle? l)
    (define (iter l head)
      (cond ((not (pair? l)) false)
            ((eq? (cdr l) head) true)
            (else (or (if (pair? (car l)) (cycle? (car l)) false)
                      (iter (cdr l) head)))))
    (iter l l))

  (define x '(a b c)) 
  (define y '(d e f)) 
  (set-car! (cdr x) y) 
  (set-car! x (cdr x)) 
  (set-cdr! (last-pair y) (cdr y))
  (cycle? x)
#+end_src

#+RESULTS:
: #f
: #t
: #t
: #t

** Exercise 3.19 (pipe)
#+name:type
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (type item)
    (car item))
  (define (contents item)
    (cdr item))
#+end_src

#+name:box
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (make-box item)
    (cons 'box (cons 'empty item)))

  (define (box? item)
    (cond ((not (pair? item)) false)
          (else (eq? (type item) 'box))))

  (define (state-box box)
    (car (contents box)))

  (define (set-state! box state)
    (set-car! (contents box) state))

  (define (pour box)
    (let ((state (state-box box)))
      (cond ((eq? state 'empty) (set-state! box 'full))
            ((eq? state 'full) (set-state! box 'overflow))
            (else (set-state! box 'overflow)))))
#+end_src


#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<append!>>
  <<cycle>>
  <<type>>
  <<box>>

  (define (cycle? l)
    (if (not (pair? l)) false
        (let ((first (car l)))
          (if (box? first)
              (begin (pour first)
                     (cond ((eq? 'overflow (state-box first)) true)
                           (else (cycle? (cdr l)))))
              (begin (set-car! l (make-box first))
                     (cycle? l))))))

  (cycle? (list 1 2 3 4))
  (cycle? (make-cycle (list 1 2 3 4)))

  (define x '(a b c)) 
  (define y '(d e f)) 
  (set-car! (cdr x) y) 
  (set-car! x (cdr x)) 
  (set-cdr! (last-pair y) (cdr y))
  (cycle? x)
#+end_src

#+RESULTS:
: #f
: #t
: #f

** Exercise 3.19 (rabbit)
#+name:repeated
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (repeated f n)
    (if (= 1 n)
        f
        (lambda (x) (f ((repeated f (dec n)) x)))))

#+end_src

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<append!>>
  <<cycle>>
  <<repeated>>

  (define (cndr n l)
    ((repeated cdr n) l))

  (define (make-runner speed l)
    (let ((location l))
      (lambda (message)
        (cond ((eq? message 'location) location)
              ((eq? message 'run) (if (or (null? location) (null? (cdr location)))
                                      false
                                      (set! location (cndr speed location))))))))

  (define (meet? runner1 runner2)
    (eq? (runner1 'location) (runner2 'location)))

  (define l1 (list 1 2 3 4 5))
  (define c1 (make-cycle (list 1 2 3 4 5)))
  (define l2 (list 1 2))

  (define (cycle? l)
    (define (can-meet turtle rabbit)
      (if (and (turtle 'run) (rabbit 'run))
          (cond ((meet? turtle rabbit) true)
                (else (can-meet turtle rabbit)))
          false))
    (can-meet (make-runner 1 l) (make-runner 2 l)))


  (cycle? c1)
  (cycle? l1)
#+end_src

#+RESULTS:
: #t
: #f

** Exercise 3.20 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define a 9)
  (define b 9)

  (define c (cons a 12))
  (define d (cons a 12))
  (eq? c d)
#+end_src

#+RESULTS:
: #f


** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src



* 2. Representing Queues
** Queue
#+name:queue
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (front-ptr queue) (car queue))

  (define (rear-ptr queue) (cdr queue))

  (define (set-front-ptr! queue item)
    (set-car! queue item))

  (define (set-rear-ptr! queue item)
    (set-cdr! queue item))

  (define (empty-queue? queue)
    (null? (front-ptr queue)))

  (define (make-queue) (cons '() '()))

  (define (front-queue queue)
    (if (empty-queue? queue)
        (error "FRONT called with an empty queue" queue)
        (car (front-ptr queue))))

  (define (insert-queue! queue item)
    (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))

  (define (delete-queue! queue)
    (cond ((empty-queue? queue)
           (error "DELETE! called with an empty queue" queue))
          (else (set-front-ptr! queue (cdr (front-ptr queue)))
                queue)))
  (define (print-queue q)
    (display (front-ptr q))
    (newline))
#+end_src

** Exercise 3.21 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (print-queue q)
    (display (front-ptr q))
    (newline))
#+end_src

** Exercise 3.22 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (make-queue)
    (let ((front-ptr '())
          (rear-ptr '()))

      (define (queue)
        (cons front-ptr rear-ptr))

      (define (set-front-ptr! item)
        (set! front-ptr item))

      (define (set-rear-ptr! item)
        (set! rear-ptr item))
  
      (define (empty-queue?)
        (null? front-ptr))

      (define (front-queue)
        (if (empty-queue?)
            (error "FRONT called with an empty queue" (queue))
            (car front-ptr)))

      (define (insert-queue! item)
        (let ((new-pair (cons item '())))
          (cond ((empty-queue?)
                 (set-front-ptr! new-pair)
                 (set-rear-ptr! new-pair)
                 (queue))
                (else
                 (set-cdr! rear-ptr new-pair)
                 (set-rear-ptr! new-pair)
                 (queue)))))

      (define (delete-queue!)
        (cond ((empty-queue?)
               (error "DELETE! called with an empty queue" (queue)))
              (else (set-front-ptr! (cdr front-ptr)) (queue))))

      (define (print-queue)
        (display front-ptr)
        (newline))

      (define (dispatch m)
        (cond ((eq? m 'front-ptr) front-ptr)
              ((eq? m 'rear-ptr) rear-ptr)
              ((eq? m 'set-front-ptr!) set-front-ptr!)
              ((eq? m 'set-rear-ptr!) set-rear-ptr!)
              ((eq? m 'empty?) empty-queue?)
              ((eq? m 'front) front-queue)
              ((eq? m 'insert-queue!) insert-queue!)
              ((eq? m 'delete-queue!) delete-queue!)
              ((eq? m 'print) print-queue)))
      dispatch))

  (define d1 (make-queue))
  ((d1 'insert-queue!) 3)
  ((d1 'insert-queue!) 4)
  ((d1 'insert-queue!) 4)
  ((d1 'delete-queue!))
  ((d1 'print))
#+end_src

#+RESULTS:
: ((3) 3)
: ((3 4) 4)
: ((3 4 4) 4)
: ((4 4) 4)
: (4 4)

** Exercise 3.23 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (make-deque)
    (let ((front-ptr '())
          (rear-ptr '()))

      (define (deque)
        (cons front-ptr rear-ptr))

      (define (set-front-ptr! item)
        (set! front-ptr item))

      (define (set-rear-ptr! item)
        (set! rear-ptr item))

      (define (empty-deque?)
        (and (null? front-ptr) (null? rear-ptr)))

      (define (front-deque)
        (if (empty-deque?)
            (error "FRONT called with an empty queue" (deque))
            (car front-ptr)))

      (define (rear-deque)
        (if (empty-deque?)
            (error "FRONT called with an empty queue" (deque))
            (car rear-ptr)))

      (define (front-insert-deque! item)
        (let ((new-pair (cons item '())))
          (cond ((empty-deque?)
                 (set-front-ptr! new-pair)
                 (set-rear-ptr! new-pair)
                 (deque))
                (else
                 (set-cdr! new-pair front-ptr)
                 (set-front-ptr! new-pair)
                 (deque)))))

      (define (rear-insert-deque! item)
        (let ((new-pair (cons item '())))
          (cond ((empty-deque?)
                 (set-front-ptr! new-pair)
                 (set-rear-ptr! new-pair)
                 (deque))
                (else
                 (set-cdr! rear-ptr new-pair)
                 (set-rear-ptr! new-pair)
                 (deque)))))

      (define (front-delete-deque!)
        (cond ((empty-deque?)
               (error "DELETE! called with an empty queue" (deque)))
              (else (set-front-ptr! (cdr front-ptr)) (deque))))

      (define (rear-delete-deque!)
        (cond ((empty-deque?)
               (error "DELETE! called with an empty queue" (deque)))
              (else (set-rear-ptr! nil) (deque))))

      (define (print-deque)
        (display front-ptr)
        (newline))

      (define (dispatch m)
        (cond ((eq? m 'front-ptr) front-ptr)
              ((eq? m 'rear-ptr) rear-ptr)
              ((eq? m 'set-front-ptr!) set-front-ptr!)
              ((eq? m 'set-rear-ptr!) set-rear-ptr!)
              ((eq? m 'empty?) empty-deque?)
              ((eq? m 'front) front-deque)
              ((eq? m 'front-insert!) front-insert-deque!)
              ((eq? m 'rear-insert!) rear-insert-deque!)
              ((eq? m 'front-delete!) front-delete-deque!)
              ((eq? m 'rear-delete!) rear-delete-deque!)
              ((eq? m 'deque) deque)
              ((eq? m 'print) print-deque)))
      dispatch))

  (define d1 (make-deque))
  ((d1 'deque))
  ((d1 'empty?))
  ((d1 'front-insert!) 1)
  ((d1 'front-insert!) 3)
  ((d1 'front-insert!) 4)
  ((d1 'rear-insert!) 4)
  ((d1 'front-delete!))
  ((d1 'rear-delete!))
#+end_src

#+RESULTS:

** Exercise 3.23 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (make-deque)
    (let ((front-ptr '())
          (rear-ptr '()))

      (define (deque)
        (cons front-ptr rear-ptr))

      (define (set-front-ptr! item)
        (set! front-ptr item))

      (define (set-rear-ptr! item)
        (set! rear-ptr item))

      (define (empty-deque?)
        (and (null? front-ptr) (null? rear-ptr)))

      (define (front-deque)
        (if (empty-deque?)
            (error "FRONT called with an empty queue")
            (car front-ptr)))

      (define (rear-deque)
        (if (empty-deque?)
            (error "FRONT called with an empty queue")
            (car rear-ptr)))

      (define (front-insert-deque! item)
        (let ((new-pair (cons (cons item '()) front-ptr)))
          (cond ((empty-deque?)
                 (set-front-ptr! new-pair)
                 (set-rear-ptr! new-pair))
                (else
                 (set-cdr! (car front-ptr) new-pair)
                 (set-front-ptr! new-pair)))))

      (define (rear-insert-deque! item)
        (let ((new-pair (cons (cons item rear-ptr) '())))
          (cond ((empty-deque?)
                 (set-front-ptr! new-pair)
                 (set-rear-ptr! new-pair))
                (else
                 (set-cdr! rear-ptr new-pair)
                 (set-rear-ptr! new-pair)))))

      (define (front-delete-deque!)
        (cond ((empty-deque?)
               (error "DELETE! called with an empty queue"))
              (else (set-front-ptr! (cdr front-ptr))
                    (set-cdr! (car front-ptr) nil))))

      (define (rear-delete-deque!)
        (cond ((empty-deque?)
               (error "DELETE! called with an empty queue"))
              (else (set-rear-ptr! (cdr (car rear-ptr)))
                    (set-cdr! rear-ptr nil))))

      (define (print-deque)
        (let ((formatted-deque (map (lambda (item) (car item)) front-ptr)))
          (display formatted-deque)
          (newline)))

      (define (dispatch m)
        (cond ((eq? m 'front-ptr) front-ptr)
              ((eq? m 'rear-ptr) rear-ptr)
              ((eq? m 'set-front-ptr!) set-front-ptr!)
              ((eq? m 'set-rear-ptr!) set-rear-ptr!)
              ((eq? m 'empty?) empty-deque?)
              ((eq? m 'front) front-deque)
              ((eq? m 'front-insert!) front-insert-deque!)
              ((eq? m 'rear-insert!) rear-insert-deque!)
              ((eq? m 'front-delete!) front-delete-deque!)
              ((eq? m 'rear-delete!) rear-delete-deque!)
              ((eq? m 'deque) deque)
              ((eq? m 'print) print-deque)))
      dispatch))

  (define (print d1) ((d1 'print)))
  (define (front-insert! d1 x) ((d1 'front-insert!) x))
  (define (rear-insert! d1 x) ((d1 'rear-insert!) x))
  (define (front-delete! d1) ((d1 'front-delete!)))
  (define (rear-delete! d1) ((d1 'rear-delete!)))

  (define d1 (make-deque))
  (print d1)
  (front-insert! d1 3)
  (front-insert! d1 4)
  (rear-insert! d1 5)
  (rear-insert! d1 7)
  (rear-delete! d1)
  (rear-delete! d1)
  (rear-delete! d1)
  (rear-delete! d1)
  (print d1)
#+end_src

#+RESULTS:
: set-mcdr!: contract violation
:   expected: mpair?
:   given: ()
:   context...:
:    body of "/var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-mL2sTA/org-babel-8GTaLI.rkt"
: ()


** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src


* 3. Representing Tables

** Tables 
#+name:1d-table
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (lookup key table)
    (let ((record (assoc key (cdr table))))
      (if record
          (cdr record)
          false)))

  (define (assoc key records)
    (cond ((null? records) false)
          ((equal? key (caar records)) (car records))
          (else (assoc key (cdr records)))))

  (define (insert! key value table)
    (let ((record (assoc key (cdr table))))
      (if record
          (set-cdr! record vaule)
          (set-cdr! table
                    (cons (cons key value)
                          (cdr table)))))
    'ok)

  (define (make-table)
    (list '*table*))
#+end_src

#+name:2d-table
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (lookup key-1 key-2 table)
    (let ((subtable
           (assoc key-1 (cdr table))))
      (if subtable
          (let ((record
                 (assoc key-2 (cdr subtable))))
            (if record
                (cdr record)
                false))
          false)))

  (define (assoc key records)
    (cond ((null? records) false)
          ((equal? key (caar records)) (car records))
          (else (assoc key (cdr records)))))

  (define (insert! key-1 key-2 value table)
    (let ((subtable (assoc key-1 (cdr table))))
      (if subtable
          (let ((record (assoc key-2 (cdr subtable))))
            (if record
                (set-cdr! record value)
                (set-cdr! subtable
                          (cons (cons key-2 value)
                                (cdr subtable)))))
          (set-cdr! table
                    (cons (list key-1
                                (cons key-2 value))
                                (cdr table)))))
      'ok)

  (define (make-table)
    (list '*table*))
#+end_src

#+name:2d-local-table
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (make-table)
    (let ((local-table (list '*table*)))
      (define (lookup key-1 key-2)
        (let ((subtable
               (assoc key-1 (cdr local-table))))
          (if subtable
              (let ((record
                     (assoc key-2 (cdr subtable))))
                (if record (cdr record) false))
              false)))
      (define (insert! key-1 key-2 value)
        (let ((subtable
               (assoc key-1 (cdr local-table))))
          (if subtable
              (let ((record
                     (assoc key-2 (cdr subtable))))
                (if record
                    (set-cdr! record value)
                    (set-cdr! subtable
                              (cons (cons key-2 value)
                                    (cdr subtable)))))
              (set-cdr! local-table
                        (cons (list key-1 (cons key-2 value))
                              (cdr local-table)))))
        'ok)
      (define (dispatch m)
        (cond ((eq? m 'lookup-proc) lookup)
              ((eq? m 'insert-proc!) insert!)
              (else (error "Unknown operation: TABLE" m))))
      dispatch))
  (define operation-table (make-table))
  (define get (operation-table 'lookup-proc))
  (define put (operation-table 'insert-proc!))
#+end_src

** Exercise 3.24 
#+name:custom-key-equality-table
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (make-table same-key?)
    (let ((local-table (list '*table*)))

      (define (assoc key records)
        (cond ((null? records) false)
              ((same-key? key (caar records)) (car records))
              (else (assoc key (cdr records)))))

      (define (lookup key-1 key-2)
        (let ((subtable
               (assoc key-1 (cdr local-table))))
          (if subtable
              (let ((record
                     (assoc key-2 (cdr subtable))))
                (if record (cdr record) false))
              false)))

      (define (insert! key-1 key-2 value)
        (let ((subtable
               (assoc key-1 (cdr local-table))))
          (if subtable
              (let ((record
                     (assoc key-2 (cdr subtable))))
                (if record
                    (set-cdr! record value)
                    (set-cdr! subtable
                              (cons (cons key-2 value)
                                    (cdr subtable)))))
              (set-cdr! local-table
                        (cons (list key-1 (cons key-2 value))
                              (cdr local-table)))))
        'ok)

      (define (dispatch m)
        (cond ((eq? m 'lookup-proc) lookup)
              ((eq? m 'insert-proc!) insert!)
              (else (error "Unknown operation: TABLE" m))))
      dispatch))
#+end_src

#+RESULTS: tolerance-table

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<custom-key-equality-table>>
  (define (make-equality-test-tolerance tolerance)
    (lambda (key-1 key-2)
      (equal? (quotient key-1 (expt 10 tolerance))
              (quotient key-2 (expt 10 tolerance)))))

  (define tolerance-test (make-equality-test-tolerance 1))

  (tolerance-test 1234 1235)

  (define t1 (make-table tolerance-test))

  (define get (t1 'lookup-proc))
  (define put (t1 'insert-proc!))

  (put 1234 01 +)
  (get 1234 01)
#+end_src

#+RESULTS:
: #t
: ok
: #<procedure:+>

** Exercise 3.25 
#+name:dynamic-local-table
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (make-table)
    (let ((local-table (list '*table*)))

      (define (lookup keys)
        (define (iter keys table)
          (let ((found (assoc (car keys) (cdr table))))
            (cond ((not found) false)
                  ((null? (cdr keys)) (cdr found))
                  (else (iter (cdr keys) found)))))
        (iter keys local-table))

      (define (insert! keys value)
        (define (iter keys value table)
          (let ((found (assoc (car keys) (cdr table))))
            (cond ((not found) (if (null? (cdr keys))
                                   (set-cdr! table
                                             (cons (cons (car keys) value)
                                                   (cdr table)))
                                   (begin (set-cdr! table
                                                    (cons (cons (car keys) nil)
                                                          (cdr table)))
                                          (iter (cdr keys) value (cadr table)))))
                  (found (if (null? (cdr keys))
                             (set-cdr! found value)
                             (iter (cdr keys) value (cdr found)))))))
        (iter keys value local-table))

      (define (dispatch m)
        (cond ((eq? m 'lookup-proc) lookup)
              ((eq? m 'insert-proc!) insert!)
              (else (error "Unknown operation: TABLE" m))))
      dispatch))
#+end_src

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<dynamic-local-table>>
  (define operation-table (make-table))
  (define get (operation-table 'lookup-proc))
  (define put (operation-table 'insert-proc!))
#+end_src

** Exercise 3.26 
#+name:tree-local-table
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (assoc key records)
    (cond ((null? records) false)
          ((equal? key (caar records)) (car records))
          (else (assoc key (cdr records)))))

  (define (make-table)
    (let ((local-table (list '*table*)))

      (define (lookup keys)
        (define (iter keys table)
          (let ((found (assoc (car keys) (cdr table))))
            (cond ((not found) false)
                  ((null? (cdr keys)) (cdr found))
                  (else (iter (cdr keys) found)))))
        (iter keys local-table))

      (define (insert! keys value)
        (define (iter keys value table)
          (let ((found (assoc (car keys) (cdr table))))
            (cond ((not found) (if (null? (cdr keys))
                                   (set-cdr! table
                                             (cons (cons (car keys) value)
                                                   (cdr table)))
                                   (begin (set-cdr! table
                                                    (cons (cons (car keys) nil)
                                                          (cdr table)))
                                          (iter (cdr keys) value (cadr table)))))
                  (found (if (null? (cdr keys))
                             (set-cdr! found value)
                             (iter (cdr keys) value (cdr found)))))))
        (iter keys value local-table))

      (define (dispatch m)
        (cond ((eq? m 'lookup-proc) lookup)
              ((eq? m 'insert-proc!) insert!)
              (else (error "Unknown operation: TABLE" m))))
      dispatch))
#+end_src

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<tree-local-table>>
  (define operation-table (make-table))
  (define get (operation-table 'lookup-proc))
  (define put (operation-table 'insert-proc!))
#+end_src

** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src

** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src



* 4. A Simulator for Digital Circuits
** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  get-signal
#+end_src

#+RESULTS:
: /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-mL2sTA/org-babel-p9CIXl.rkt:4:0: get-signal: unbound identifier
:   in: get-signal
:   location...:
:    /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-mL2sTA/org-babel-p9CIXl.rkt:4:0


** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  queue
#+end_src

#+RESULTS:
: /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-jJnCZ4/org-babel-jNjFss.rkt:4:0: queue: unbound identifier
:   in: queue
:   location...:
:    /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-jJnCZ4/org-babel-jNjFss.rkt:4:0



* 5. Propagation of Constraints
** Exercise 3.35 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square a b)
    (define (process-new-value)
      (if (has-value? b)
          (if (< (get-value b) 0)
              (error "square less than 0: SQUARER"
                     (get-value b))
              (set-value! a (sqrt (get-value b)) me))
          (set-value! b (* (get-value a) (get-value a)) me)))

    (define (process-forget-value)
      (forget-value! a me)
      (forget-value! b me)
      (process-new-value))

    (define (me request)
      (cond ((eq? request 'I-have-a-value) (process-new-value))
            ((eq? request 'I-lost-my-value) (process-forget-value))
            (else (error "Unknown request: ADDER" request))))
    (connect a me)
    (connect b me)
    me)
#+end_src
** Exercise 3.36
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (c+ x y)
    (let ((z (make-connector)))
      (adder x y z)
      z))

  (define (c- x y)
    (let ((z (make-connector)))
      (adder z y x)
      z))

  (define (c* x y)
    (let ((z (make-connector)))
      (multiplier x y z)
      z))

  (define (c/ x y)
    (let ((z (make-connector)))
      (multiplier z y x)
      z))

  (define (cv x)
    (let ((z (make-connector)))
      (constant x z)
      z))
#+end_src


** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src

** Test 
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src

