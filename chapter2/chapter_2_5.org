#+TITLE: Systems with Generic Operations
* Pre
** Filter
#+name:filter
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (filter predicate sequence)
    (cond ((null? sequence) nil)
          ((predicate (car sequence)) (cons (car sequence) (filter predicate (cdr sequence))))
          (else (filter predicate (cdr sequence)))))
#+end_src

#+RESULTS:
: (1 3 5)

** Accumulate
#+name:accumulate
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (accumulate op initial seq)
    (if (null? seq) initial (op (car seq) (accumulate op initial (cdr seq)))) )
#+end_src

** Enumerate
#+name:enumerate-interval
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (enumerate-interval low high)
    (if (> low high) nil (cons low (enumerate-interval (inc low) high))))
#+end_src

#+name:enumerate-tree
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (enumerate-tree tree)
    (cond ((null? tree) nil)
          ((not (pair? tree)) (list tree))
          (else (append (enumerate-tree (car tree)) (enumerate-tree (cdr tree))))
          ))
#+end_src

** pre-requistes
#+NAME:prime
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
  (define (smallest-divisor n) (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1 )))))
  (define (divides? a b) (= (remainder b a) 0))

  (define (prime? n)
    (and (not (= n 1)) (= n (smallest-divisor n))))
#+end_src

#+NAME:fib
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (fib n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+
                 (fib (- n 1))
                 (fib (- n 2))))))
#+end_src

#+NAME:square
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
#+end_src

#+NAME:gcd
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))
#+end_src

#+NAME:average
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (average a b) (/ (+ a b) 2))
#+end_src

#+NAME:pow
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (pow x n)
    (if (= n 1)
        x
        (* x (pow x (dec n)))))
#+end_src
** Test 
#+begin_src racket :lang sicp :results output
#+end_src

#+RESULTS:
: #f


* ~ 2.5.2  is not done by code because of absence of put, get
** Exercise 2.82
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (apply-generic op . args)
    (let ((type-tags (map type-tag args)))
      (let ((proc (get op type-tags)))
        (if proc
            (apply proc (map contents args))
            (if (= (length args) 2)
                (let ((type1 (car type-tags))
                      (type2 (cadr type-tags))
                      (a1 (car args))
                      (a2 (cadr args)))
                  (let ((t1->t2 (get-coercion type1 type2))
                        (t2->t1 (get-coercion type2 type1)))
                    (cond (t1->t2
                           (apply-generic op (t1->t2 a1) a2))
                          (t2->t1
                           (apply-generic op a1 (t2->t1 a2)))
                          (else (error "No method for these types"
                                       (list op type-tags))))))
                (error "No method for these types"
                       (list op type-tags)))))))
#+end_src

#+RESULTS:
: /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-wimcDg/org-babel-voFpzt.rkt:5:24: type-tag: unbound identifier
:   in: type-tag
:   location...:
:    /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-wimcDg/org-babel-voFpzt.rkt:5:24

** test
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (a first . args) args)
  (define (b first . args) first)
  (list? (a 1 2 3 4))
  (list? (b 1 2 3 4))
#+end_src

#+RESULTS:
: #t

** test
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<accumulate>>
  (define a (list (list 1 2 3 4) false true))
  (define (list-and l)
    (cond ((null? l) true)
          ((not (car l)) false)
          (else (list-and (cdr l)))))

  (list-and a)
#+end_src

** Exercise 2.84
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (higher? type1 type2 tower)
    (< (length (memq type1 tower)) (length type2 tower)))

  (define (apply-generic op . args)
    (let ((type-tags (map type-tag args)))
      (let ((proc (get op type-tags)))
        (if proc
            (apply proc (map contents args))
            (if (= (length args) 2)
                (let ((type1 (car type-tags))
                      (type2 (cadr type-tags))
                      (a1 (car args))
                      (a2 (cadr args)))
                  (cond ((higher? type1 type2 tower) (apply-generic op (raise a1) a2))
                        (else (apply-generic op a1 (raise a2)))))
                (error "No method for these types"
                       (list op type-tags)))))))
#+end_src

#+RESULTS:
: /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-wimcDg/org-babel-voFpzt.rkt:5:24: type-tag: unbound identifier
:   in: type-tag
:   location...:
:    /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-wimcDg/org-babel-voFpzt.rkt:5:24


#+RESULTS:
: #f


** round
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (sin 3)
#+end_src

#+RESULTS:
: 0.1411200080598672

** test
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src


* 2.5.3 Symbolic Algebra
** same-variable?
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (variable? x) (symbol? x))
  (define (same-variable? x y)
    (and (variable? x)
         (variable? y)
         (eq? x y)))

  (same-variable? 'x 'x)
#+end_src

#+RESULTS:
: /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-PM51ed/org-babel-JapCUF.rkt:11:0: atom: unbound identifier
:   in: atom
:   location...:
:    /var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-PM51ed/org-babel-JapCUF.rkt:11:0

** test
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src
