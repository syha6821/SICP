#+TITLE: Multiple Representations for Abstract Data
* Pre
** Filter
#+name:filter
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (filter predicate sequence)
    (cond ((null? sequence) nil)
          ((predicate (car sequence)) (cons (car sequence) (filter predicate (cdr sequence))))
          (else (filter predicate (cdr sequence)))))
#+end_src

#+RESULTS:
: (1 3 5)

** Accumulate
#+name:accumulate
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (accumulate op initial seq)
    (if (null? seq) initial (op (car seq) (accumulate op initial (cdr seq)))) )
#+end_src

** Enumerate
#+name:enumerate-interval
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (enumerate-interval low high)
    (if (> low high) nil (cons low (enumerate-interval (inc low) high))))
#+end_src

#+name:enumerate-tree
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (enumerate-tree tree)
    (cond ((null? tree) nil)
          ((not (pair? tree)) (list tree))
          (else (append (enumerate-tree (car tree)) (enumerate-tree (cdr tree))))
          ))
#+end_src

** pre-requistes
#+NAME:prime
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
  (define (smallest-divisor n) (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1 )))))
  (define (divides? a b) (= (remainder b a) 0))

  (define (prime? n)
    (and (not (= n 1)) (= n (smallest-divisor n))))
#+end_src

#+NAME:fib
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (fib n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+
                 (fib (- n 1))
                 (fib (- n 2))))))
#+end_src

#+NAME:square
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
#+end_src

#+NAME:gcd
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))
#+end_src

#+NAME:average
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (average a b) (/ (+ a b) 2))
#+end_src

#+NAME:pow
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (pow x n)
    (if (= n 1)
        x
        (* x (pow x (dec n)))))
#+end_src
** Test 
#+begin_src racket :lang sicp :results output
#+end_src

#+RESULTS:
: #f


* 2.4.1
** test
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<accumulate>>
  (accumulate + 0 (list 1 2 3 4 5))
  (apply + (list 1 2 3 4 5))
  (min 1 3 4 5)
#+end_src

#+RESULTS:
: 15
: 15
: 1
