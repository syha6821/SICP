#+TITLE: Formulating Abstractions with Higher-Order Procedures

** pre-requistes
#+NAME:prime
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
  (define (smallest-divisor n) (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1 )))))
  (define (divides? a b) (= (remainder b a) 0))

  (define (prime? n)
    (and (not (= n 1)) (= n (smallest-divisor n))))
#+end_src

#+RESULTS: prime
: #f
: #t
: #t
: #f
: #t

#+NAME:average
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (average a b) (/ (+ a b) 2))
#+end_src

#+NAME:square
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (square x) (* x x))
#+end_src

#+RESULTS: average
: 3

** Snippets
#+begin_src racket :lang sicp :results output
#+end_src

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
#+end_src

** Test 

#+begin_src racket :lang sicp :results output
  (define (sum-int a b)
    (if (> a b) 0 (+ a  (sum-int (inc a) b))))

  (sum-int 3 6)
#+end_src

#+RESULTS:
: 18

#+begin_src racket :lang sicp :results output
  (define (square x) (* x x))

  (define (sum-square a b)
    (if (> a b) 0 (+ (square a) (sum-square (inc a) b)) ))

  (sum-square 3 5)
#+end_src

#+RESULTS:
: 50

** ex. pi-sum
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (pi-sum a b)
    (if (> a b) 0 (+ (/ 1 (* a (+ a 2))) (pi-sum (+ a 4) b))))

  (pi-sum 1.0 1000000)
#+end_src

#+RESULTS:
: 0.3926988316987241

** SUM
#+NAME:sum
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (sum TERM a NEXT b)
    (if (> a b) 0 (+ (TERM a) (sum TERM (NEXT a) NEXT b))))
#+end_src

#+RESULTS: sum

#+RESULTS:
: 14

#+NAME:square-sum
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<sum>>

  (define (square x) (* x x))

  (define (sum-sq a b)
    (sum a square inc b))

  (sum-sq 1 3)
#+end_src

#+RESULTS: square-sum
: 14

#+NAME:pi-sum
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<sum>>
  (define (square x) (* x x))

  (define (pi-sum a b)
    (sum a (lambda (i) (/ 1 (* i (+ i 2)))) (lambda (i) (+ i 4)) b))

  (pi-sum 1.0 10000)
#+end_src

#+RESULTS: pi-sum
: 0.3926740816989741

#+NAME:integral
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<sum>>
  (define dx 0.01)
  (define (cube x) (* x x x))

  ;; (sum term a next b)

  (define (integral f a b)
    (* (sum f (+ a (/ dx 2)) (lambda (i) (+ i dx)) b) dx))

  (integral cube 0 1)
#+end_src

#+RESULTS: integral
: 0.24998750000000042

** Exercise 1.29
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<sum>>
  (define (even? n) (= (remainder n 2) 0))
  (define (odd? n) (not (even? n)))
  (define (cube x) (* x x x))

  (define (simpson f a b n)
    (define h (/ (- b a) n))
    (define (term k)
      (define y (f (+ a (* k h))))

      (cond ((or (= k 0) (= k n)) y)
            ((even? k) (* 2 y))
            ((odd? k) (* 4 y))))

    (* (sum term 0 inc n) (/ h 3)))

  (simpson cube 0 1.0 1000)
#+end_src

#+RESULTS:
: 0.2500000000000003

** Exercise 1.30
#+NAME:iter-sum
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (sum term a next b)
    (define (iter a result)
      (if (> a b)
          result
          (iter (next a) (+ (term a) result))))
      (iter a 0))
#+end_src

#+RESULTS: iter-sum

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<sum>>
  (define (even? n) (= (remainder n 2) 0))
  (define (odd? n) (not (even? n)))
  (define (cube x) (* x x x))

  (define (simpson f a b n)
    (define h (/ (- b a) n))
    (define (term k)
      (define y (f (+ a (* k h))))

      (cond ((or (= k 0) (= k n)) y)
            ((even? k) (* 2 y))
            ((odd? k) (* 4 y))))

    (* (sum term 0 inc n) (/ h 3)))

  (simpson cube 0 1.0 1000)
#+end_src

#+RESULTS:
: 0.2500000000000003

** Exercise 1.31
#+NAME:product
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (product term a next b)
    (if (> a b)
        1
        (* (term a) (product term (next a) next b))))
#+end_src

#+NAME:iter-sum
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (sum term a next b)
    (define (iter a result)
      (if (> a b)
          result
          (iter (next a) (+ (term a) result))))
      (iter a 0))
#+end_src

#+NAME:product-iter
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (product term a next b)
    (define (iter a result)
      (if (> a b)
          result
          (iter (next a) (* (term a) result))))
    (iter a 1))
#+end_src

#+RESULTS: product

#+NAME:factorial
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
<<product-iter>>
  (define (factorial n)
    (define (identity x) x)
    (product identity 1 inc n))

  (factorial 4)
#+end_src

#+RESULTS: factorial
: 24

#+NAME:pi-approx
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<product-iter>>
  (define (pi-approx n)
    (define (term n) (/ (* (- n 1) (+ n 1)) (* n n)))
    (define (add-2 n) (+ n 2))

    (* 4 (product term 3.0 add-2 n)))

  (pi-approx 10000000)
#+end_src

#+RESULTS: pi-approx
: 3.141592810670918

** Exercise 1.32
#+NAME:accumulate
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (accumulate combiner null-value term a next b)
    (if (> a b)
        null-value
        (combiner (term a) (accumulate combiner null-value term (next a) next b))))
#+end_src

#+RESULTS: accumulate

#+NAME:iter-accumulate
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (accumulate combiner null-value term a next b)
    (define (iter a result)
      (if (> a b)
          result
          (iter (next a) (combiner (term a) result))))
      (iter a null-value))
#+end_src

#+RESULTS: iter-accumulate
** Exercise 1.33
#+NAME:filtered-accumulate
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (filtered-accumulate filter combiner null-value term a next b)
    (cond ((> a b) null-value)
          ((not (filter a)) (combiner null-value (filtered-accumulate filter combiner null-value term (next a) next b)))
          (else (combiner (term a) (filtered-accumulate filter combiner null-value term (next a) next b)))
          ))
#+end_src

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<filtered-accumulate>>
  <<prime>>

  (define (filtered-sum-squares filter a b) (filtered-accumulate filter + 0 square a inc b))
  (filtered-sum-squares prime? 2 5)
#+end_src

#+RESULTS:
: 38

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<filtered-accumulate>>
  <<prime>>
  (define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))

  (define (idenitty a) a)

  (define (f a b)
    (define (filt a) (= 1 (gcd a b)))
    (filtered-accumulate filt * 1 identity a inc b))
  (f 1 10)
#+end_src

#+RESULTS:
: 189

** Constructing Procedures Using lambda
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (a k)
    (let ((b 4)) (+ k b))
    )
  (a 2)
  #+end_src

#+RESULTS:
: 6

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  ((lambda (a b c) (* a b c)) 4 5 6)
  #+end_src

#+RESULTS:
: 120

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (f x)
    (+ (let ((x 3)) (+ x (* x 10))) x)
    )
  (f 5)
  #+end_src

#+RESULTS:
: 38

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (f x)
    (let ((x 3)
          (y (+ x 2)))
      (* x y))
    )
  (f 2)
  #+end_src

#+RESULTS:
: 12

** Exercise 1.34
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (f g) (g 2))
  (f f)
#+end_src

#+RESULTS:
: application: not a procedure;
:  expected a procedure that can be applied to arguments
:   given: 2
:   context...:
:    body of "/var/folders/_3/nwly65x92d13qp765t5gqbl40000gn/T/babel-y7CS6M/org-babel-WvOjEj.rkt"

** Fixed-Point
#+NAME:fixed-point
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define tolerance 0.00001)
  (define (fixed-point f initial-guess)
    (define (close-enough? a b) (< (abs (- a b)) tolerance))
    (define (try guess)
      (let ((next (f guess)))
        (if (close-enough? guess next)
            next
            (try next))))
    (try initial-guess))
#+end_src

#+RESULTS:

#+NAME:fixed-point-print
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define tolerance 0.00001)
  (define (fixed-point f initial-guess)
    (define (close-enough? a b) (< (abs (- a b)) tolerance))
    (define (try guess)
      (display guess)
      (newline)
      (let ((next (f guess)))
        (if (close-enough? guess next)
            next
            (try next))))
    (try initial-guess))
#+end_src

#+RESULTS:

** Exercise 1.35
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<fixed-point>>
  (fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0)
  (/ 1 (fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0))
#+end_src

#+RESULTS:
: 1.6180327868852458
: 0.6180344478216819

** Exercise 1.36
without average damping
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<fixed-point-print>>
  (fixed-point (lambda (x) (/ (log 1000) (log x))) 2.0)
#+end_src

#+RESULTS:
#+begin_example
2.0
9.965784284662087
3.004472209841214
6.279195757507157
3.759850702401539
5.215843784925895
4.182207192401397
4.8277650983445906
4.387593384662677
4.671250085763899
4.481403616895052
4.6053657460929
4.5230849678718865
4.577114682047341
4.541382480151454
4.564903245230833
4.549372679303342
4.559606491913287
4.552853875788271
4.557305529748263
4.554369064436181
4.556305311532999
4.555028263573554
4.555870396702851
4.555315001192079
4.5556812635433275
4.555439715736846
4.555599009998291
4.555493957531389
4.555563237292884
4.555517548417651
4.555547679306398
4.555527808516254
4.555540912917957
4.555532270803653
#+end_example

with average damping
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<fixed-point-print>>
  (fixed-point (lambda (x) (/ (+ (/ (log 1000) (log x)) x) 2)) 2.0)
#+end_src

#+RESULTS:
#+begin_example
2.0
5.9828921423310435
4.922168721308343
4.628224318195455
4.568346513136242
4.5577305909237005
4.555909809045131
4.555599411610624
4.5555465521473675
4.555537551999825
#+end_example

** Exercise 1.37
recursive process
#+NAME:cont-frac-recur
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (cont-frac n d k)
    (define (try-until k i)
      (if (= i k)
          (/ (n k) (d k))
          (/ (n i) (+ (d i) (try-until k (inc i))))))
    (try-until k 1))
#+end_src

#+RESULTS:
: 0.6180339887498948

iterative process
#+NAME:cont-frac-iter
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (cont-frac n d k)
    (define (cont-frac-iter n d k result)
      (if (= k 1)
          result
          (cont-frac-iter n d (dec k) (/ (n k) (+ (d k) result)))))
    (cont-frac-iter n d k (/ (n k) (d k))))
#+end_src

#+RESULTS:
: 0.6180339887498948

** Exercise 1.38
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<cont-frac-recur>>
  ;; (define (d i) (if (= 2 (remainder i 3)) (+ 2 (* 2 (/ (- i 2) 3))) 1))
  (define (d i) (if (= 2 (remainder i 3)) (* (/ 2 3) (+ i 1)) 1))
  (cont-frac (lambda (i) 1.0) d 10)
#+end_src

#+RESULTS:
: 0.7182817182817183

** Exercise 1.39
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<cont-frac-recur>>
  ;; (define (n i) (if (= 1 i) i (-(* i i))))
  (define (tan-cf x k) (cont-frac (lambda (i) (if (= 1 i) x (- (* x x)))) (lambda (i) (- (* 2.0 i) 1)) k))
  (tan-cf 29 100)
  (- 10)
#+end_src

#+RESULTS:
: 0.887142843798215
: -10

** Procedures as Returned values
#+NAME:average-damp
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<average>>
  (define (average-damp f) (lambda (x) (average x (f x))))
#+end_src

#+RESULTS: average-damp
: 55

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<average-damp>>
  <<fixed-point>>
  (define (sqrt x) (fixed-point (average-damp (lambda (y) (/ x y))) 1.0))
  (define (cube-root x) (fixed-point (average-damp (lambda (y) (/ x (* y y)))) 1.0))
  (sqrt 2)
  (cube-root 27)
#+end_src

#+RESULTS:
: 1.4142135623746899
: 2.9999972321057697

#+NAME:deriv
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define dx 0.00001)
  (define (deriv g)
    (lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))
#+end_src

#+RESULTS: deriv
: 4.000010000027032

#+NAME:newton
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<fixed-point>>
  <<deriv>>
  (define (newton-transform g) (lambda (x) (- x (/ (g x) ((deriv g) x)))))
  (define (newtons-method g guess) (fixed-point (newton-transform g) guess))
#+end_src

#+RESULTS: newton
: 2.000000000036784

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<newton>>
  <<square>>
  (define (sqrt x) (newtons-method (lambda (y) (- (square y) x)) 1.0 ))
  (sqrt 2)
#+end_src

#+RESULTS:
: 1.4142135623822438

** Exercise 1.40
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<newton>>
  (define (cubic a b c) (lambda (x) (+ (* x x x) (* a x x) (* b x) c)))
  (newtons-method (cubic -23 142 -120) 20.0)
#+end_src

#+RESULTS:
: 12.000000000000728
** Exercise 1.41
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (double f) (lambda (x) (f (f x))))
  (((double (double double)) inc) 5)
#+end_src

#+RESULTS:
: 21
** Exercise 1.42
#+NAME:compose
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (compose f g) (lambda (x) (f (g x))))
#+end_src

#+RESULTS: compose
: 49

#+RESULTS:
: 49

** Exercise 1.43
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<square>>
  (define (repeated f n)
    (if (= n 1)
        f
        (lambda (x) (f ((repeated f (dec n)) x)))))

  ((repeated square 2) 5)
#+end_src

#+RESULTS:
: 625

#+name: repeated
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<compose>>
  (define (repeated f n)
    (if (= n 1)
        f
        (compose f (repeated f (dec n)))))
#+end_src

#+RESULTS: repeated
: 5

** Exercise 1.44
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<repeated>>
  (define dx 0.00001)
  (define (smooth f) (lambda (x) (/ (+ (f x) (f (- x dx)) (f (+ x dx))) 3)))
  (define (n-fold-smooth f n) ((repeated smooth n) f))
  ((n-fold-smooth (lambda (x) x) 10) 3)
#+end_src

#+RESULTS:
: 3.0

** Exercise 1.45
#+NAME:pow
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define (pow x n)
    (if (= n 1)
        x
        (* x (pow x (dec n)))))
#+end_src

#+RESULTS: pow
: 1024

#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<average-damp>>
  <<fixed-point>>
  <<repeated>>
  <<pow>>

  (define (nth-root n x)
    (fixed-point ((repeated average-damp (floor (log n 2))) (lambda (y) (/ x (pow y (- n 1))))) 1.0))

  (nth-root 9 512)
    #+end_src

#+RESULTS:
: 1.9999997106840102

** Exercise 1.46
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  <<square>>
  <<average-damp>>

  (define (iterative-improve good-enough improve)
    (lambda (guess)
      (if (good-enough guess)
          guess
          ((iterative-improve good-enough improve) (improve guess) ))))

  (define (sqrt x)
    (define (good-enough? guess)
      (< (abs (- (square guess) x)) 0.001))
    (define (improve guess)
      (average guess (/ x guess)))
    ((iterative-improve good-enough? improve) 1.0))

  (define (fixed-point f first-guess)
    (define (close-enough? guess)
      (< (abs (- (f guess) guess)) 0.00001))
    (define (improve guess)
      (f guess))

    ((iterative-improve close-enough? improve) 1.0))

  (sqrt 36)
  (fixed-point cos 1.0)

  <<repeated>>
  <<pow>>

  (define (nth-root n x)
    (fixed-point ((repeated average-damp (floor (log n 2))) (lambda (y) (/ x (pow y (- n 1))))) 1.0))

  (nth-root 9 512)
#+end_src

#+RESULTS:
: 6.000000005333189
: 0.7390893414033927
: 2.000002314624352

#+NAME:fixed-point
#+begin_src racket :lang sicp :results output :noweb yes :noweb-ref yes
  (define tolerance 0.00001)
  (define (fixed-point f initial-guess)
    (define (close-enough? a b) (< (abs (- a b)) tolerance))
    (define (try guess)
      (let ((next (f guess)))
        (if (close-enough? guess next)
            next
            (try next))))
    (try initial-guess))
#+end_src

#+RESULTS: fixed-point
